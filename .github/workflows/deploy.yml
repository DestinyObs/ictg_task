name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ictg_task-backend:latest ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/ictg_task-backend:latest

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ictg_task-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/ictg_task-frontend:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Stop and remove existing containers
            docker stop backend_service frontend_service postgres_database || true
            docker rm backend_service frontend_service postgres_database || true

            # Pull latest images
            docker pull destinyobs/ictg_task-backend:latest
            docker pull destinyobs/ictg_task-frontend:latest

            # Ensure network exists
            docker network inspect devops-network >/dev/null 2>&1 || docker network create devops-network

            # Restart Database
            docker run -d \
              --name postgres_database \
              --network devops-network \
              -e POSTGRES_USER=app \
              -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              -e POSTGRES_DB=ictg_db \
              -p 5432:5432 \
              --restart unless-stopped \
              postgres:latest

            # Wait for database to be ready (with retries)
            retries=10
            until docker exec postgres_database pg_isready -U app || [ $retries -eq 0 ]; do
              echo "Waiting for PostgreSQL to be ready..."
              sleep 5
              retries=$((retries - 1))
            done
            if [ $retries -eq 0 ]; then
              echo "PostgreSQL failed to start." >&2
              exit 1
            fi

            # Run Backend
            docker run -d \
              --name backend_service \
              --network devops-network \
              -e DATABASE_URL="postgresql://app:${{ secrets.POSTGRES_PASSWORD }}@postgres_database:5432/ictg_db" \
              -p 8000:8000 \
              --restart unless-stopped \
              destinyobs/ictg_task-backend:latest

            # Run Frontend
            docker run -d \
              --name frontend_service \
              --network devops-network \
              -p 5173:5173 \
              --restart unless-stopped \
              destinyobs/ictg_task-frontend:latest

            # Cleanup
            docker system prune -af
